// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum TransactionType {
  TRANSFER // Bàn giao thiết bị từ người này sang người khác
  REPAIR // Gửi thiết bị đi sửa chữa
  MAINTENANCE // Bảo trì định kỳ
  RETURN // Trả lại thiết bị cho IT hoặc kho
  DONATION // Tặng thiết bị cho bộ phận khác/tổ chức khác
  DISPOSAL // Thanh lý thiết bị (liquidation)
  LOST // Báo mất thiết bị
  OTHER // Khác (ghi rõ trong note)
}

enum TransactionStatus {
  PENDING // Chờ xử lý (chờ ký, chờ duyệt)
  IN_PROGRESS // Đang được xử lý (VD: đang sửa chữa, đang vận chuyển)
  COMPLETED // Hoàn tất giao dịch
  CANCELLED // Giao dịch đã bị huỷ
}

enum TransactionRole {
  FROM // Người gửi thiết bị đi (khởi tạo hoặc ký)
  TO // Người nhận thiết bị
}

enum Warranty {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

model User {
  // ID
  id String @id @default(uuid())

  // Basic
  email       String    @unique
  password    String
  name        String?
  gender      Gender?
  dob         DateTime?
  phone       String?
  address     String?
  avatar      String?
  microsoftId String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // FK
  officeId     String?
  departmentId String?

  // BelongsTo 
  office     Office?     @relation(fields: [officeId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])

  // HasMany
  sessions          Session[]
  assetTransactions AssetTransaction[]
}

model Session {
  // ID
  id String @id @default(uuid())

  // Basic
  accessToken           String    @unique
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  isActive              Boolean   @default(true)
  ipAddress             String
  userAgent             String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  lastUsedAt      DateTime  @default(now())
  lastRefreshedAt DateTime?

  // FK
  userId String?

  // BelongsTo
  user User? @relation(fields: [userId], references: [id])
}

model Office {
  // ID
  id String @id @default(uuid())

  // Basic
  name              String?
  internationalName String?
  shortName         String?
  taxCode           String  @unique
  address           String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // HasMany
  users             User[]
  assetTransactions AssetTransaction[]
}

model Department {
  // ID
  id String @id @default(uuid())

  // Basic
  name String @unique

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // HasMany
  users             User[]
  assetTransactions AssetTransaction[]
}

model DeviceType {
  // ID
  id String @id @default(uuid())

  // Basic
  name String @unique

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // HasMany
  deviceModels DeviceModel[]
  assets       Asset[]
}

model DeviceModel {
  // ID
  id String @id @default(uuid())

  // Basic
  name String @unique

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // FK
  deviceTypeId String?

  // BelongsTo
  deviceType DeviceType? @relation(fields: [deviceTypeId], references: [id])

  // HasMany
  assets Asset[]
}

model Bank {
  // ID
  id String @id @default(uuid())

  // Basic
  name      String?
  shortName String  @unique

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // HasMany
  bankAccounts BankAccount[]
}

model BankAccount {
  // ID
  id String @id @default(uuid())

  // Basic
  accountNumber String
  accountName   String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // FK
  supplierId String?
  bankId     String?

  // BelongsTo
  supplier Supplier? @relation(fields: [supplierId], references: [id])
  bank     Bank?     @relation(fields: [bankId], references: [id])
}

model Supplier {
  // ID
  id String @id @default(uuid())

  // Basic
  name    String
  address String?
  taxCode String  @unique
  phone   String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // HasMany
  bankAccounts BankAccount[]
  assets       Asset[]
}

model Asset {
  // ID
  id String @id @default(uuid())

  // Basic
  internalCode     String    @unique
  serialNumber     String?
  purchaseDate     DateTime?
  warranty         Warranty?
  customProperties Json?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // FK
  deviceModelId String?
  deviceTypeId  String?
  supplierId    String?

  // BelongsTo
  deviceModel DeviceModel? @relation(fields: [deviceModelId], references: [id])
  deviceType  DeviceType?  @relation(fields: [deviceTypeId], references: [id])
  supplier    Supplier?    @relation(fields: [supplierId], references: [id])

  // HasMany
  assetTransactions AssetTransaction[]
}

model AssetTransaction {
  // ID
  id String @id @default(uuid())

  // Basic
  role   TransactionRole? // enum: FROM, TO
  type   TransactionType? // enum: TRANSFER, REPAIR, MAINTENANCE, RETURN, etc.
  status TransactionStatus? // enum: PENDING, COMPLETED, CANCELLED, etc.
  note   String?
  files  Json?

  signature String?
  signedAt  DateTime?

  handoverFilePath String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // FK
  assetId      String
  userId       String?
  departmentId String?
  officeId     String?

  // BelongsTo
  asset      Asset?      @relation(fields: [assetId], references: [id])
  user       User?       @relation(fields: [userId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
  office     Office?     @relation(fields: [officeId], references: [id])
}
