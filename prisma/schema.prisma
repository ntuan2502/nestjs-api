// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // ID
  id Int @id @default(autoincrement())

  // Basic
  email    String    @unique
  password String
  name     String
  gender   String?
  dob      DateTime?
  phone    String?
  address  String?
  avatar   String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // FK
  officeId     Int?
  departmentId Int?

  // BelongsTo 
  office     Office?     @relation(fields: [officeId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])

  // HasMany
  sessions Session[]
  assets   Asset[]
}

model Session {
  // ID
  id Int @id @default(autoincrement())

  // Basic
  accessToken           String    @unique
  refreshToken          String?   @unique
  refreshTokenExpiresAt DateTime?
  isActive              Boolean   @default(true)
  ipAddress             String?
  userAgent             String?

  // Timestamps
  createdAt       DateTime  @default(now())
  lastUsedAt      DateTime  @default(now())
  lastRefreshedAt DateTime?

  // FK
  userId Int?

  // BelongsTo
  user User? @relation(fields: [userId], references: [id])
}

model Office {
  // ID
  id Int @id @default(autoincrement())

  // Basic
  name              String  @unique
  internationalName String?
  shortName         String?
  taxCode           String  @unique
  address           String?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // HasMany
  users  User[]
  assets Asset[]
}

model Department {
  // ID
  id Int @id @default(autoincrement())

  // Basic
  name String @unique

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // HasMany
  users  User[]
  assets Asset[]
}

model DeviceType {
  // ID
  id Int @id @default(autoincrement())

  // Basic
  name String @unique

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // HasMany
  deviceModels DeviceModel[]
  assets       Asset[]
}

model DeviceModel {
  // ID
  id Int @id @default(autoincrement())

  // Basic
  name String @unique

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // FK
  deviceTypeId Int?

  // BelongsTo
  deviceType DeviceType? @relation(fields: [deviceTypeId], references: [id])

  // HasMany
  assets Asset[]
}

model Bank {
  // ID
  id Int @id @default(autoincrement())

  // Basic
  bankName      String
  accountNumber String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // FK
  supplierId Int?

  // BelongsTo
  supplier Supplier? @relation(fields: [supplierId], references: [id])
}

model Supplier {
  // ID
  id Int @id @default(autoincrement())

  // Basic
  name    String
  address String
  taxCode String @unique
  phone   String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // HasMany
  banks  Bank[]
  assets Asset[]
}

model Asset {
  // ID
  id Int @id @default(autoincrement())

  // Basic
  internalCode     String   @unique
  serialNumber     String
  purchaseDate     DateTime
  warrantyUntil    DateTime
  status           String
  customProperties Json // Key-Value dáº¡ng JSON: { cpu: "...", ram: "...", resolution: "..." }

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // FK
  deviceModelId Int?
  deviceTypeId  Int?
  supplierId    Int?
  departmentId  Int?
  officeId      Int?
  userId        Int?

  // BelongsTo
  deviceModel DeviceModel? @relation(fields: [deviceModelId], references: [id])
  deviceType  DeviceType?  @relation(fields: [deviceTypeId], references: [id])
  supplier    Supplier?    @relation(fields: [supplierId], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  office      Office?     @relation(fields: [officeId], references: [id])
  user        User?       @relation(fields: [userId], references: [id])
}
