generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum TransactionType {
  TRANSFER // Bàn giao thiết bị từ người này sang người khác
  RETURN // Trả lại thiết bị cho IT hoặc kho
  REPAIR // Gửi thiết bị đi sửa chữa
  MAINTENANCE // Bảo trì định kỳ
  DONATION // Tặng thiết bị cho bộ phận khác/tổ chức khác
  DISPOSAL // Thanh lý thiết bị (liquidation)
  LOST // Báo mất thiết bị
  OTHER // Khác (ghi rõ trong note)
}

enum TransactionStatus {
  PENDING
  PROGRESS
  COMPLETED
  CANCELLED
}

enum TransactionDirection {
  OUTGOING
  INCOMING
}

enum UserRole {
  ADMIN
  USER
}

model User {
  // ID
  id String @id @default(uuid())

  // Basic
  email       String    @unique
  password    String
  name        String?
  gender      Gender    @default(MALE)
  dob         DateTime?
  phone       String?
  address     String?
  avatar      String?
  microsoftId String?
  role        UserRole  @default(USER)

  // FK
  officeId     String?
  departmentId String?

  // BelongsTo 
  office     Office?     @relation(fields: [officeId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String?
  createdBy   User?    @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])

  // HasMany
  createdUser               User[]               @relation("CreatedByUser")
  updatedUser               User[]               @relation("UpdatedByUser")
  deletedUser               User[]               @relation("DeletedByUser")
  session                   Session[]
  createdSession            Session[]            @relation("CreatedByUser")
  updatedSession            Session[]            @relation("UpdatedByUser")
  deletedSession            Session[]            @relation("DeletedByUser")
  createdOffice             Office[]             @relation("CreatedByUser")
  updatedOffice             Office[]             @relation("UpdatedByUser")
  deletedOffice             Office[]             @relation("DeletedByUser")
  createdDepartment         Department[]         @relation("CreatedByUser")
  updatedDepartment         Department[]         @relation("UpdatedByUser")
  deletedDepartment         Department[]         @relation("DeletedByUser")
  createdDeviceType         DeviceType[]         @relation("CreatedByUser")
  updatedDeviceType         DeviceType[]         @relation("UpdatedByUser")
  deletedDeviceType         DeviceType[]         @relation("DeletedByUser")
  createdDeviceModel        DeviceModel[]        @relation("CreatedByUser")
  updatedDeviceModel        DeviceModel[]        @relation("UpdatedByUser")
  deletedDeviceModel        DeviceModel[]        @relation("DeletedByUser")
  createdBank               Bank[]               @relation("CreatedByUser")
  updatedBank               Bank[]               @relation("UpdatedByUser")
  deletedBank               Bank[]               @relation("DeletedByUser")
  createdBankAccount        BankAccount[]        @relation("CreatedByUser")
  updatedBankAccount        BankAccount[]        @relation("UpdatedByUser")
  deletedBankAccount        BankAccount[]        @relation("DeletedByUser")
  createdSupplier           Supplier[]           @relation("CreatedByUser")
  updatedSupplier           Supplier[]           @relation("UpdatedByUser")
  deletedSupplier           Supplier[]           @relation("DeletedByUser")
  createdAsset              Asset[]              @relation("CreatedByUser")
  updatedAsset              Asset[]              @relation("UpdatedByUser")
  deletedAsset              Asset[]              @relation("DeletedByUser")
  createdAssetTransferBatch AssetTransferBatch[] @relation("CreatedByUser")
  updatedAssetTransferBatch AssetTransferBatch[] @relation("UpdatedByUser")
  deletedAssetTransferBatch AssetTransferBatch[] @relation("DeletedByUser")
  assetTransaction          AssetTransaction[]
  createdAssetTransaction   AssetTransaction[]   @relation("CreatedByUser")
  updatedAssetTransaction   AssetTransaction[]   @relation("UpdatedByUser")
  deletedAssetTransaction   AssetTransaction[]   @relation("DeletedByUser")
  createdFile               File[]               @relation("CreatedByUser")
  updatedFile               File[]               @relation("UpdatedByUser")
  deletedFile               File[]               @relation("DeletedByUser")
}

model Session {
  // ID
  id String @id @default(uuid())

  // Basic
  accessToken           String    @unique
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  isActive              Boolean   @default(true)
  ipAddress             String
  userAgent             String

  lastUsedAt      DateTime  @default(now())
  lastRefreshedAt DateTime?

  // FK
  userId String

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])

  // BelongsTo
  user User @relation(fields: [userId], references: [id])
}

model Office {
  // ID
  id String @id @default(uuid())

  // Basic
  name      String?
  internationalName    String?
  shortName String?
  taxCode   String  @unique
  address   String?

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])

  // HasMany
  users             User[]
  assetTransactions AssetTransaction[]
}

model Department {
  // ID
  id String @id @default(uuid())

  // Basic
  name String @unique

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])

  // HasMany
  users             User[]
  assetTransactions AssetTransaction[]
}

model DeviceType {
  // ID
  id String @id @default(uuid())

  // Basic
  name String @unique

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])

  // HasMany
  deviceModels DeviceModel[]
  assets       Asset[]
}

model DeviceModel {
  // ID
  id String @id @default(uuid())

  // Basic
  name String @unique

  // FK
  deviceTypeId String?

  // BelongsTo
  deviceType DeviceType? @relation(fields: [deviceTypeId], references: [id])

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])

  // HasMany
  assets Asset[]
}

model Bank {
  // ID
  id String @id @default(uuid())

  // Basic
  name      String?
  shortName String  @unique

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])

  // HasMany
  bankAccounts BankAccount[]
}

model BankAccount {
  // ID
  id String @id @default(uuid())

  // Basic
  name   String
  number String

  // FK
  supplierId String?
  bankId     String?

  // BelongsTo
  supplier Supplier? @relation(fields: [supplierId], references: [id])
  bank     Bank?     @relation(fields: [bankId], references: [id])

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])
}

model Supplier {
  // ID
  id String @id @default(uuid())

  // Basic
  name              String
  internationalName String?
  shortName         String?
  address           String?
  taxCode           String  @unique
  phone             String?

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])

  // HasMany
  bankAccounts BankAccount[]
  assets       Asset[]
}

model Asset {
  // ID
  id String @id @default(uuid())

  // Basic
  internalCode     String    @unique
  serialNumber     String?
  purchaseDate     DateTime?
  warranty         Int?
  customProperties Json?

  // FK
  deviceModelId String?
  deviceTypeId  String?
  supplierId    String?

  // BelongsTo
  deviceModel DeviceModel? @relation(fields: [deviceModelId], references: [id])
  deviceType  DeviceType?  @relation(fields: [deviceTypeId], references: [id])
  supplier    Supplier?    @relation(fields: [supplierId], references: [id])

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])

  // HasMany
  assetTransactions AssetTransaction[]
}

model AssetTransferBatch {
  // ID
  id String @id @default(uuid())

  // Basic
  note String?

  // FK
  handoverId String?

  // BelongsTo
  handover File? @relation(fields: [handoverId], references: [id])

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])

  // HasMany
  assetTransactions AssetTransaction[]
}

model AssetTransaction {
  // ID
  id String @id @default(uuid())

  // Basic
  direction TransactionDirection
  type      TransactionType
  status    TransactionStatus    @default(PENDING)
  note      String?
  signedAt  DateTime?

  // FK
  assetId              String
  userId               String?
  departmentId         String?
  officeId             String?
  assetTransferBatchId String?
  signatureId          String?

  // BelongsTo
  asset              Asset?              @relation(fields: [assetId], references: [id])
  user               User?               @relation(fields: [userId], references: [id])
  department         Department?         @relation(fields: [departmentId], references: [id])
  office             Office?             @relation(fields: [officeId], references: [id])
  assetTransferBatch AssetTransferBatch? @relation(fields: [assetTransferBatchId], references: [id])
  signature          File?               @relation(fields: [signatureId], references: [id])

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])
}

model File {
  // ID
  id String @id @default(uuid())

  // Basic
  filePath String
  fileType String?

  // Timestamps
  createdAt   DateTime @default(now())
  createdById String
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])

  updatedAt   DateTime @updatedAt
  updatedById String?
  updatedBy   User?    @relation("UpdatedByUser", fields: [updatedById], references: [id])

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("DeletedByUser", fields: [deletedById], references: [id])

  // HasMany
  assetTransferBatch AssetTransferBatch[]
  assetTransaction   AssetTransaction[]
}
